---
title: "Warm-up"
format: html
editor: visual
---

## 

```{r}
library(tidyverse)
```

```{r}
quarter_splits <- c(1.0, 1.1, 1.2, 1.1, 1.4, 1.5, 1.6, 1.4)

for (i in seq_along(quarter_splits)) {
  half_time <- quarter_splits [i] + quarter_splits [i + 1]
  print(half_time)
}
```

```{r}
animal_age <- function(animal, age) {
  if (animal == "dog") {
    print(age * 7)
  } else if (animal == "goat") {
    print(age * 4.7)
  }
}
```

Intro to functions

Make a function to double the user input

{} tells us that it is the body of a function

```{r}
double_this <- function(my_value) {
  print(2 * my_value)
}

double_this(my_value = 200)
double_this(200)

double_this(c(1, 2, 10, 100, 175))
```

Your turn: Write a function that asks for a user's NAME and age, and returns an exclamation, like "I'm \[NAME\], and I am \[age\] years old."

```{r}
exclaim_age <- function(your_name, your_age) {
  print(paste("My name is", your_name, "and I am", your_age, "years old!"))
}

exclaim_age(your_name = "Teddy", your_age = 5)
```

Calculate

```{r}
convert_animal_age <- function(animal, human_age) {
  if (animal == "dog") {
    print(human_age *7)
  } else if (animal == "goat") {
    print(human_age * 4.7)
  } else {
    print("Please enter dog or goat for animal")
  }
}

convert_animal_age(animal = "dog", human_age = 12)

convert_animal_age(animal = "goat", human_age = 4.2)

convert_animal_age(animal = "pika", human_age = 2)

# What can you add if the animal is not part of the code to get a message: else {print("Please enter dog or goat for animal")


```

```{r}
dog_choice <- tribble(
  ~dog_name, ~food, 
  "Khora", "everything", 
  "Teddy", "salmon", 
  "Waffle", "pancakes", 
  "Banjo", "chicken"
)

# There's more than 1 way to do filter like using the pipe

## What should the subset contain, if name equals Waffle than it only keeps 

dog_menu <- function(name) {
  my_subset <- filter(data = dog_choice, dog_name == name)
  print(my_subset)
}

dog_menu(name = "Waffle")

dog_menu <- function(name) {
  my_subset <- filter(data = dog_choice, dog_name == name)
  print(paste("My name is", my_subset$dog_name, "and my favorite food is", my_subset$food))
}

dog_menu(name = "Teddy")
```

Functions meet for loops

```{r}
means_over_columns <- function(dataframe){
  for (i in seq_along(dataframe)) {
    col_mean <- mean(dataframe[[i]], na.rm = TRUE)
    column_name <- colnames(dataframe[i])
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}

means_over_columns(dataframe = mtcars)

means_over_columns(dataframe = faithful)

```
